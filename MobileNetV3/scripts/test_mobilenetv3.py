import torch
import torchvision.transforms as transforms
from torchvision.models import mobilenet_v3_large
from PIL import Image
import os
import pandas as pd

# ƒê·ªãnh nghƒ©a transform (ph·∫£i gi·ªëng khi train)
transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.43967315554618835, 0.3947981894016266, 0.36026132106781006], std=[0.21060341596603394, 0.19447742402553558, 0.19024626910686493])
])

# Load model
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
model = mobilenet_v3_large()
num_ftrs = model.classifier[0].in_features  # L·∫•y s·ªë features t·ª´ MobileNetV3

# Thay ƒë·ªïi classifier ƒë·ªÉ ph√π h·ª£p v·ªõi 4 l·ªõp n·∫•m
model.classifier = torch.nn.Sequential(
    torch.nn.Linear(num_ftrs, 1024),
    torch.nn.ReLU(),
    torch.nn.Dropout(0.4),
    torch.nn.Linear(1024, 4)  # 4 l·ªõp ƒë·∫ßu ra
)

# Load tr·ªçng s·ªë ƒë√£ train
model.load_state_dict(torch.load("D:/Models for OAI/MobileNetV3/models/mobilenetv3.pth", map_location=device))
model.to(device)
model.eval()

# Nh√£n th·ª±c t·∫ø theo th·ª© t·ª± ·∫£nh
ground_truth = [1] * 50 + [2] * 50 + [3] * 50 + [0] * 50

# ƒê·ªçc ·∫£nh t·ª´ th∆∞ m·ª•c test
test_dir = "./test_data/"
image_files = sorted(os.listdir(test_dir))  # ƒê·∫£m b·∫£o ƒë√∫ng th·ª© t·ª± ·∫£nh
predictions = []

correct = 0
total = len(image_files)

with torch.no_grad():
    for i, image_file in enumerate(image_files):
        img_path = os.path.join(test_dir, image_file)
        image = Image.open(img_path).convert("RGB")
        image = transform(image).unsqueeze(0).to(device)

        output = model(image)
        predicted_class = torch.argmax(output, dim=1).item()
        
        predictions.append((image_file[0 : 3], predicted_class))
        
        # So s√°nh v·ªõi ground_truth
        if predicted_class == ground_truth[i]:
            correct += 1

# T√≠nh accuracy
accuracy = correct / total * 100
print(f"üî• Accuracy: {accuracy:.2f}% ({correct}/{total})")

# Xu·∫•t file CSV
df = pd.DataFrame(predictions, columns=["id", "type"])
df.to_csv("test_predictions.csv", index=False)
print("‚úÖ File test_predictions.csv ƒë√£ ƒë∆∞·ª£c t·∫°o!")
